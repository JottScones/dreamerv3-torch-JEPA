import mani_skill.envs
import gymnasium as gym
from mani_skill.vector.wrappers.gymnasium import ManiSkillVectorEnv
import numpy as np

to_np = lambda x: x.detach().cpu().numpy()
class ManiSkill:
    def __init__(self, task="PushT-v1", obs_key="image", act_key="action", size=(64, 64), num_envs=1, seed=0, control_mode="pd_joint_delta_pos"):
        # 9x9, 11x11, 13x13 and 15x15 are available
        env = gym.make(
            task, # there are more tasks e.g. "PushCube-v1", "PegInsertionSide-v1", ...
            sensor_configs=dict(width=size[0], height=size[1]),
            num_envs=num_envs,
            obs_mode="rgb", # there is also "state_dict", "rgbd", ...
            control_mode=control_mode, # there is also "pd_joint_delta_pos", ...
            sim_backend="physx_cuda"
        )
        self._env = ManiSkillVectorEnv(env, auto_reset=False, ignore_terminations=False)
        self._seed = seed
        self._obs_key = obs_key
        self._act_key = act_key
        self._size = size
        self._num_envs = num_envs

    def __getattr__(self, name):
        if name.startswith("__"):
            raise AttributeError(name)
        try:
            return getattr(self._env, name)
        except AttributeError:
            raise ValueError(name)

    @property
    def observation_space(self):
        spaces = self._env.single_observation_space.spaces.copy()
        views = spaces["sensor_data"]["base_camera"]["rgb"]
        if views.shape[0] > 1:
            print(f"multiple views are not yet supported")

        return gym.spaces.Dict(
            {
                "image": gym.spaces.Box(0, 255, self._size + (3,), dtype=np.uint8),
                "is_first": gym.spaces.Box(0, 1, (), dtype=bool),
                "is_last": gym.spaces.Box(0, 1, (), dtype=bool),
                "is_terminal": gym.spaces.Box(0, 1, (), dtype=bool),
            }
        )

    @property
    def action_space(self):
        space = self._env.single_action_space
        space.discrete = True
        return space

    def step(self, action):
        res = self._env.step(action)
        raw_obs, reward, done, truncated, info = res

        print(raw_obs.shape)
        print(raw_obs)
        
        reward = reward.cpu()
        done = done.cpu()

        obs = {}
        obs["image"] = to_np(raw_obs["sensor_data"]["base_camera"]["rgb"])
        obs["is_first"] = np.zeros(self._num_envs, dtype=bool)
        obs["is_last"] = done
        if "success" in info:
            obs["is_terminal"] = to_np(info["success"].cpu())
        else:
            obs["is_terminal"] = np.zeros(self._num_envs, dtype=bool)

        return obs, reward, done, info

    def reset(self, *args, **kwargs):
        raw_obs, info = self._env.reset(*args, seed=self._seed, **kwargs)

        obs = {}
        obs["image"] = to_np(raw_obs["sensor_data"]["base_camera"]["rgb"])
        obs["is_first"] = np.ones(self._num_envs, dtype=bool)
        obs["is_last"] = np.zeros(self._num_envs, dtype=bool)
        obs["is_terminal"] = np.zeros(self._num_envs, dtype=bool)
        return obs
"""
Dict('agent': Dict('qpos': Box(-inf, inf, (7,), float32), 'qvel': Box(-inf, inf, (7,), float32)), 'extra': Dict('tcp_pose': Box(-inf, inf, (7,), float32)), 'sensor_param': Dict('base_camera': Dict('extrinsic_cv': Box(-inf, inf, (3, 4), float32), 'cam2world_gl': Box(-inf, inf, (4, 4), float32), 'intrinsic_cv': Box(-inf, inf, (3, 3), float32))), 'sensor_data': Dict('base_camera': Dict('rgb': Box(0, 255, (256, 256, 3), uint8))))

Dict('agent': Dict('qpos': Box(-inf, inf, (8, 7), float32), 'qvel': Box(-inf, inf, (8, 7), float32)), 'extra': Dict('tcp_pose': Box(-inf, inf, (8, 7), float32)), 'sensor_param': Dict('base_camera': Dict('extrinsic_cv': Box(-inf, inf, (8, 3, 4), float32), 'cam2world_gl': Box(-inf, inf, (8, 4, 4), float32), 'intrinsic_cv': Box(-inf, inf, (8, 3, 3), float32))), 'sensor_data': Dict('base_camera': Dict('rgb': Box(0, 255, (8, 256, 256, 3), uint8))))

{'agent': {'qpos': tensor([[ 0.6633,  0.2180,  0.0733, -2.6923, -0.1284,  2.8908,  1.6567],
        [ 0.6275,  0.2155,  0.0780, -2.7176, -0.1057,  2.8799,  1.6740],
        [ 0.6766,  0.2146,  0.1088, -2.7097, -0.1070,  2.8843,  1.6556],
        [ 0.6504,  0.2058,  0.0871, -2.7083, -0.0970,  2.9073,  1.6423],
        [ 0.6918,  0.2499,  0.1096, -2.6886, -0.1364,  2.9191,  1.6649],
        [ 0.6864,  0.2162,  0.1055, -2.6779, -0.1009,  2.8982,  1.7087],
        [ 0.6645,  0.2200,  0.1237, -2.7120, -0.1404,  2.9174,  1.6495],
        [ 0.7009,  0.2037,  0.0711, -2.6465, -0.0854,  2.9354,  1.6911]],
       device='cuda:0'), 'qvel': tensor([[0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0.]], device='cuda:0')}, 'extra': {'tcp_pose': tensor([[-3.2336e-01,  2.7419e-01,  1.0412e-02,  1.1601e-02,  9.9992e-01,
         -5.7739e-03, -8.6844e-04],
        [-3.2804e-01,  2.5324e-01,  4.4027e-03,  2.1289e-02,  9.9882e-01,
         -4.0827e-02, -1.5224e-02],
        [-3.4590e-01,  2.8135e-01,  7.2841e-03,  1.4500e-02,  9.9979e-01,
          8.5501e-03, -1.1920e-02],
        [-3.2493e-01,  2.7366e-01,  1.2764e-02,  3.4023e-03,  9.9990e-01,
         -1.3355e-02, -2.0696e-04],
        [-3.4531e-01,  2.9508e-01,  1.3957e-03,  6.6369e-03,  9.9963e-01,
          2.5982e-02, -4.6902e-03],
        [-3.3182e-01,  2.9908e-01,  1.5827e-02, -1.7789e-03,  9.9983e-01,
         -1.8006e-02,  2.8602e-03],
        [-3.4499e-01,  2.8800e-01,  7.4943e-03,  5.2445e-03,  9.9956e-01,
          2.9177e-02, -2.5042e-03],
        [-3.0167e-01,  3.1409e-01,  3.3316e-02, -2.9750e-02,  9.9872e-01,
         -2.6497e-02,  3.1276e-02]], device='cuda:0')}, 'sensor_param': {'base_camera': {'extrinsic_cv': tensor([[[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]],

        [[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]],

        [[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]],

        [[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]],

        [[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]],

        [[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]],

        [[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]],

        [[ 0.0000,  1.0000,  0.0000,  0.0000],
         [ 0.7809,  0.0000, -0.6247,  0.1406],
         [-0.6247,  0.0000, -0.7809,  0.6559]]], device='cuda:0'), 'cam2world_gl': tensor([[[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]],

        [[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]],

        [[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]],

        [[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]],

        [[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]],

        [[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]],

        [[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]],

        [[ 0.0000, -0.7809,  0.6247,  0.3000],
         [ 1.0000,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.6247,  0.7809,  0.6000],
         [ 0.0000,  0.0000,  0.0000,  1.0000]]], device='cuda:0'), 'intrinsic_cv': tensor([[[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]],

        [[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]],

        [[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]],

        [[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]],

        [[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]],

        [[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]],

        [[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]],

        [[128.,   0., 128.],
         [  0., 128., 128.],
         [  0.,   0.,   1.]]], device='cuda:0')}}, 'sensor_data': {'base_camera': {'rgb': tensor([[[[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [151, 155, 166]],

         ...,

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]]],


        [[[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [151, 155, 166]],

         ...,

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]]],


        [[[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [151, 155, 166]],

         ...,

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]]],


        ...,


        [[[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [151, 155, 166]],

         ...,

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]]],


        [[[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [151, 155, 166]],

         ...,

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]]],


        [[[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [107, 111, 119]],

         [[111, 114, 122],
          [111, 114, 122],
          [111, 114, 122],
          ...,
          [107, 111, 119],
          [107, 111, 119],
          [151, 155, 166]],

         ...,

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]],

         [[231, 231, 231],
          [231, 231, 231],
          [231, 231, 231],
          ...,
          [231, 231, 231],
          [231, 231, 231],
          [231, 231, 231]]]], device='cuda:0', dtype=torch.uint8)}}}
"""

